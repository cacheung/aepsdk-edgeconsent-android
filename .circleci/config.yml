# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # Use the circleci android orb version that supports OpenJDK17 required by AGP 8.2+ 
  android: circleci/android@2.4.0
  codecov: codecov/codecov@3.2.4

# Workflows orchestrate a set of jobs to be run;
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - validate-code
      - build-and-unit-test:
          requires:
            - validate-code
      - functional-test:
          requires:
            - validate-code
 
jobs:
  validate-code:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-29-node
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout

      - run:
          name: Check Code Format
          command: make format-check

  build-and-unit-test:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-29-node
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: build library
          command: |
            make assemble-phone

      - run:
          name: build jitpack library
          command: |
            make edgeconsent-publish-maven-local-jitpack

      - store_artifacts:
          path: code/edgeconsent/build/libs

      - run:
          name: Javadoc
          command: make ci-javadoc
      - store_artifacts:
          path: ci/javadoc/build/reports

      - run:
          name: Build
          command: make ci-build

      - run:
          name: Build App
          command: make ci-build-app

      - run:
          name: UnitTests
          command: make ci-unit-test

     # code coverage
     - run:
          name: code coverage
          command: |
            make ci-unit-test-coverage

      - codecov/upload:
          file: code/userprofile/build/reports/coverage/test/phone/debug/report.xml
          flags: unit-tests

      - store_artifacts:
          path: ci/unit-test/build/reports

      - store_test_results:
          path: ci/unit-test/build/test-results

  functional-test:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2024.01.1
    steps:
      - checkout
      - android/start-emulator-and-run-tests:
          #   It should match the name seen in the "sdkmanager --list" output
          system-image: system-images;android-29;default;x86
          #   The command to be run, while waiting for emulator startup
          post-emulator-launch-assemble-command: make ci-build
          #   The test command
          test-command: make ci-functional-test

      # code coverage
       - run:
          name: code coverage
          command: |
            make ci-functional-test-coverage
      - codecov/upload:
          file: code/core/build/reports/coverage/androidTest/phone/connected/debug/report.xml
          flags: functional-tests


      - store_artifacts:
          path: ci/functional-test/build/reports

      - store_test_results:
          path: ci/functional-test/build/outputs/androidTest-results

